@namespace Gunfight.UI
@inherits Panel
@attribute [StyleSheet]

<root>
    @if ( CustomPanel is not null )
        return;

    <label>
        @Frame.DisplayText
    </label>
</root>

@code
{
    public IMarkerObject Object { get; set; }

    BaseMarkerPanel CustomPanel { get; set; }

    public MarkerFrame Frame => Object.MarkerFrame;

    public bool ClampToScreen { get; set; } = false;

    /// <summary>
    /// Are we off screen?
    /// </summary>
    public bool IsOffScreen;

    /// <summary>
    /// Is this marker entirely behind the screen?
    /// </summary>
    public bool IsBehind;

    protected override void OnAfterTreeRender( bool firstTime )
    {
        if ( firstTime )
        {
            if ( Object.MarkerPanelTypeOverride is not null )
            {
                var desc = TypeLibrary.GetType( Object.MarkerPanelTypeOverride );

                if ( desc is not null )
                {
                    var inst = desc.Create<BaseMarkerPanel>();
                    inst.Marker = this;
                    CustomPanel = inst;
                    CustomPanel.Parent = this;
                }
            }
        }
    }

    private static Vector2 ScreenSafezone = new( 0.05f, 0.95f );

    public override void Tick()
    {
        var toScreen = Scene.Camera.PointToScreenNormal( Frame.Position, out IsBehind );

        SetClass( "is-behind", IsBehind );

        if ( IsBehind && !ClampToScreen )
            return;

        // Are we off the screen?
        IsOffScreen = toScreen.x > 1.0f || toScreen.x < 0.0f || toScreen.y > 1.0f || toScreen.y < 0.0f;

        if ( ClampToScreen )
           toScreen = new( toScreen.x.Clamp( ScreenSafezone.x, ScreenSafezone.y ),  toScreen.y.Clamp( ScreenSafezone.x, ScreenSafezone.y ) );

        Style.Left = Length.Fraction( toScreen.x );
        Style.Top = Length.Fraction( toScreen.y );
    }

    protected override int BuildHash()
    {
        return System.HashCode.Combine( CustomPanel );
    }
}
