@using Sandbox
@using Sandbox.Razor
@using Sandbox.UI

@inherits Panel
@attribute [StyleSheet]
@namespace Facepunch.Gunfight.MainMenu

<root>
	@if ( !queryFinished )
    {
        @WhenSearching
    }
    else
    {
	    if ( Packages.Count == 0 )
	    {
		    @WhenNothingFound
		    return;
	    }
	    
        @foreach ( var package in Packages )
        {
            <PackageCard OnLaunch=@(() => DoClick( package )) class="@GetPackageClasses( package )" Package=@package/>
        }  
    }
</root>

@code
{
	public RenderFragment WhenSearching { get; set; }
	public RenderFragment WhenNothingFound { get; set; }

	List<Package> Packages { get; set; } = new();
	HashSet<Package> SelectedPackages { get; set; } = new();
	
	public Action<List<Package>> OnUpdate { get; set; }

	public int MaxSelection { get; set; } = 1;
	public int Take { get; set; } = 100;
	public string Query { get; set; } = "type:map game:facepunch.gunfight sort:popular";
	
	string GetPackageClasses( Package package )
	{
		if ( SelectedPackages.Contains( package ) ) return "selected";

		return "";
	}

	void DoClick( Package package )
	{
		if ( SelectedPackages.Contains( package ) )
		{
			SelectedPackages.Remove( package );
		}
		else
		{
			if ( MaxSelection > 0 && SelectedPackages.Count >= MaxSelection ) return;
			
			SelectedPackages.Add( package );
		}
		
		OnUpdate?.Invoke( SelectedPackages.ToList() );
	}

	bool queryFinished = false;
	async Task RunQuery()
	{
		queryFinished = false;

		var result = await Package.FindAsync( Query, Take, 0 );

		if ( result != null )
		{
			var packages = result.Packages;
			Packages = packages.ToList();
		}

		queryFinished = true;
	}

	protected override async Task OnParametersSetAsync()
	{
		await RunQuery();

		StateHasChanged();
	}
}
