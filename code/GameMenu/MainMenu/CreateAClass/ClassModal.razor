@using Sandbox.UI
@using Facepunch.Gunfight.UI

@namespace Facepunch.Gunfight.MainMenu
@inherits BaseModal
@attribute [StyleSheet]

<root>
    <div class="main">
        <div class="title">
            @ClassName
        </div>

        @if ( Weapon is null )
        {
            <div style="flex-grow: 1;" />

            <div class="weapons">
                <WeaponCard Weapon:bind=@CustomClass.PrimaryWeapon onclick=@( () => Select( CustomClass.PrimaryWeapon ) ) />
                <WeaponCard Weapon:bind=@CustomClass.SecondaryWeapon onclick=@( () => Select( CustomClass.SecondaryWeapon ) ) />
            </div>

            <div style="flex-grow: 1;" />

            <div class="options">
                <ActionButton onclick=@( () => Save() )>
                    <Title>Save</Title>
                </ActionButton>
                <ActionButton onclick=@( () => Delete() )>
                    <Title>Delete</Title>
                </ActionButton>
            </div>
        }
        else
        {
            <div class="weapon-view">
                <WeaponViewer Weapon:bind=@Weapon @ref=WeaponViewer />
            </div>

            <div class="attachment-slots">

                @foreach ( var group in WeaponAttachment.For( Weapon.Name ).GroupBy( x => x.Category ) )
                {
                    @foreach ( var attachment in group )
                    {
                        <div class="slot @( AttachmentClass( attachment ) )" onclick=@(() => ToggleAttachment( attachment ) )>
                            <label class="group">@group.Key</label>
                            <label>@attachment.Name</label>
                        </div>
                    }
                }
            </div>

            <ActionButton onclick=@( () => Return() )>
                <Title>Return</Title>
            </ActionButton>
        }
    </div>
</root>


@code
{
    public string ClassName { get; set; }
    public WeaponViewer WeaponViewer { get; set; }

    public Action<string, CreateAClass.CustomClass> OnSave;
    public Action<string> OnDelete;

    public Gunfight.CreateAClass.CustomClass CustomClass { get; set; }

    public Gunfight.CreateAClass.Weapon Weapon { get; set; }

    public void Save()
    {
        OnSave?.Invoke( ClassName, CustomClass );
        CloseModal( true );
        NotificationSystem.Notify( $"{ClassName} saved!", "Create A Class" );
    }

    void Return()
    {
        Weapon = null;
    }

    public void Select( Gunfight.CreateAClass.Weapon wpn )
    {
        Weapon = wpn;
        StateHasChanged();
    }

    public void Delete()
    {
        OnDelete?.Invoke( ClassName );
        CloseModal( true );
    }

    string AttachmentClass( WeaponAttachment att )
    {
        if ( Weapon.Attachments.Contains( att.Identifier ) ) return "active";

        return "";
    }

    public void ToggleAttachment( WeaponAttachment att )
    {
        if ( Weapon.Attachments.Contains( att.Identifier ) )
        {
            Weapon.Attachments.Remove( att.Identifier );
        }
        else
        {
            Weapon.Attachments.Add( att.Identifier );
        }

        Refresh();
    }

    public void Refresh()
    {
        if ( WeaponViewer is null ) return;

        WeaponViewer.Update();
    }

    public ClassModal( string name, Gunfight.CreateAClass.CustomClass customClass )
    {
        ClassName = name;
        CustomClass = customClass;
    }

    protected override void OnAfterTreeRender( bool firstTime )
    {
        Refresh();
    }
}
