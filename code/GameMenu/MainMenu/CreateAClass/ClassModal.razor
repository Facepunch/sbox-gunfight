@using Sandbox.UI
@using Facepunch.Gunfight.UI

@namespace Facepunch.Gunfight.MainMenu
@inherits BaseModal
@attribute [StyleSheet]

<root>
    <div class="main">
        <div class="title">
            @ClassName
        </div>

        <div class="weapon-view">
            <WeaponViewer @ref="WeaponViewer" />
        </div>

        <div class="attachment-slots">

            @foreach ( var attachment in WeaponAttachment.For( CustomClass.SecondaryWeapon.Name ) )
            {
                <div class="slot @( AttachmentClass( attachment ) )" onclick=@(() => ToggleAttachment( attachment ) ) >@attachment.Identifier</div>
            }
        </div>
@* 
        <div class="options">
            <ActionButton onclick=@( () => Save() )>
                <Title>Save</Title>
            </ActionButton>
            <ActionButton onclick=@( () => Delete() )>
                <Title>Delete</Title>
            </ActionButton>
            <ActionButton onclick=@( () => CloseModal( true ) )>
                <Title>Close</Title>
            </ActionButton>
        </div> *@
    </div>
</root>


@code
{
    public string ClassName { get; set; }
    public WeaponViewer WeaponViewer { get; set; }

    public Action OnSave;

    public Gunfight.CreateAClass.CustomClass CustomClass { get; set; }

    public Gunfight.CreateAClass.Weapon Weapon { get; set; }

    public void Save()
    {
        OnSave?.Invoke();
    }

    public void Delete()
    {
        Log.Info( "Delete" );
    }

    string AttachmentClass( WeaponAttachment att )
    {
        if ( Weapon.Attachments.Contains( att.Identifier ) ) return "active";

        return "";
    }

    public void ToggleAttachment( WeaponAttachment att )
    {
        if ( Weapon.Attachments.Contains( att.Identifier ) )
        {
            Weapon.Attachments.Remove( att.Identifier );
        }
        else
        {
            Weapon.Attachments.Add( att.Identifier );
        }

        Update();
    }

    public void Refresh()
    {
        // TODO - Set proper model
        WeaponViewer.SetModel( Gunfight.USP.USPModel );

        foreach ( var att in Weapon.Attachments.Select( x => WeaponAttachment.Get( x ) ).OrderBy( x => x.Priority ) )
        {
            att?.SetupSceneModel( WeaponViewer.Model );
        }
    }

    public ClassModal( string name, Gunfight.CreateAClass.CustomClass customClass, Action callback = null )
    {
        ClassName = name;
        CustomClass = customClass;
        OnSave = callback;


        Weapon = customClass.SecondaryWeapon;
    }

    void Update()
    {
        Refresh();

        // mp5
        //WeaponViewer.Camera.Position = Vector3.Up * 6f + Vector3.Backward * 100f;
        WeaponViewer.Camera.Position = Vector3.Right * -2f + Vector3.Up * 4f + Vector3.Backward * 70f;
        WeaponViewer.Camera.FieldOfView = 23;
        WeaponViewer.Camera.ZNear = 5;
        WeaponViewer.Camera.ZFar = 15000;
        WeaponViewer.Camera.AmbientLightColor = Color.Gray * 0.5f;

        //We should be using the map fog but use this for now. - louie
        WeaponViewer.World.GradientFog.Enabled = true;
        WeaponViewer.World.GradientFog.Color = new Color(0.03f, 0.11f, 0.19f);
        WeaponViewer.World.GradientFog.MaximumOpacity = 0.28f;
        WeaponViewer.World.GradientFog.StartHeight = 0;
        WeaponViewer.World.GradientFog.EndHeight = 2000;
        WeaponViewer.World.GradientFog.DistanceFalloffExponent = 2;
        WeaponViewer.World.GradientFog.VerticalFalloffExponent = 0;
        WeaponViewer.World.GradientFog.StartDistance = 500;
        WeaponViewer.World.GradientFog.EndDistance = 1000;
    }

    protected override void OnAfterTreeRender(bool firstTime)
    {
        base.OnAfterTreeRender(firstTime);
        Update();
    }
}
