@using Sandbox;
@using Sandbox.Menu
@using Sandbox.UI;

@implements INavigatorPage
@attribute [StyleSheet]
@inherits Panel
@namespace Facepunch.Gunfight.MainMenu

@if ( Lobby == null )
{
	<root>
		<div class="main">
			<div class="left column">
				<div class="game-title">
					Gunfight
				</div>
						
				<div class="game-subtitle">
					Joining Lobby...
				</div>
			</div>
		</div>
	</root>

	return;
}

<root>
	<div class="background-override" @ref=BackgroundOverride />
	<div class="background-mask" @ref=BackgroundMask />
	
	<div class="main">
		<div class="left column">
			<div class="game-title">
				Gunfight
			</div>

			<label class="game-subtitle">@(Lobby.Owner.Name)'s lobby - @(Lobby.MemberCount)/@(Lobby.MaxMembers)</label>

			@* <label class="stats-title">Debug Stats</label>
			
			@foreach ( var data in Lobby.Data )
			{
				<div class="stat">
					<i>feed</i>
					<label>@data.Key: @data.Value</label>
				</div>
			} *@

			<ExpandWidget>
				<Title>Map</Title>
				<Body>
				@if ( MapPackage != null )
				{
					<PackageCard Fill=@true Package=@MapPackage/>
				}
				</Body>
			</ExpandWidget>

			<ExpandWidget>
				<Title>Game Mode</Title>
				<Body>
					<GamemodeCard GamemodeName=@ModeName/>
				</Body>
			</ExpandWidget>

			<div style="flex-grow: 1;"/>

			<LobbyChat/>
		</div>

		<div style="flex-grow: 1;"/>

		<div class="right column">
			<div class="game-subtitle">
				Member List
			</div>

			<div class="member-list">
				@for ( int i = 0; i < Lobby.MaxMembers; i++ )
				{
					var index = i + 1;

					if ( Lobby.Members.Count() - 1 >= i )
					{
						var member = Members.ElementAt( i );

						<div class="member-entry @(Lobby.IsReady( member ) ? "ready" : "")">
							<div class="background"/>
							<label class="index">@index</label>
							<img src="avatar:@member.Id"/>

							@if ( Lobby.Owner.Id == member.Id )
							{
								<i class="owner">wifi</i>
							}
							else
							{
								<i>account_circle</i>
							}

							<label class="name">@member.Name</label>
							<div style="flex-grow: 1;"/>
							
							@if ( Lobby.IsReady( member ) )
							{
								<i>sports_esports</i>
							}
						</div>
					}
					else
					{
						<div class="member-entry">
							<div class="background"/>
							<label class="index">@index</label>
							<div style="flex-grow: 1;"/>
							<label class="index">Waiting for player</label>
							<div style="flex-grow: 1;"/>
						</div>
					}
				}
			</div>

			<div style="flex-grow: 1;"/>
			
			@if ( Lobby.HasReadyCountdown )
			{
				<ActionButton>
					<Title>
						<label>Starting in @TimeSpan.FromSeconds( Lobby.ReadyCountdown ).ToString( @"ss" )</label>
					</Title>
				</ActionButton>
			}
			
			<ActionButton onclick=@LeaveLobby>
				<Title>
					Leave
				</Title>
				<Extra>
					<i>waving_hand</i>
				</Extra>
			</ActionButton>
			
			<ActionButton onclick=@ToggleReadyStatus>
				<Title>
					@if ( Lobby.IsLocalPlayerReady )
					{
						<Label>Un-Ready</Label>
					}
					else
					{
						<Label>Ready</Label>
					}
				</Title>
				<Extra>
					@if ( Lobby.IsLocalPlayerReady )
					{
						<i>remove</i>
					}
					else
					{
						<i>add</i>
					}
				</Extra>
			</ActionButton>
		</div>
	</div>
</root>

@code
{
	GunfightLobby Lobby => MainMenu.CurrentLobby;
	string MapIdent => Lobby?.Map;

	Package MapPackage { get; set; }

	void ToggleReadyStatus( PanelEvent e )
	{
		Lobby.SetReady( !Lobby.IsLocalPlayerReady );
	}
	
	IEnumerable<Friend> Members => Lobby.Members.OrderByDescending( x => x.Id == Lobby.Owner.Id );
	
	Panel BackgroundOverride { get; set; }
	Panel BackgroundMask { get; set; }

	protected override void OnAfterTreeRender( bool firstTime )
	{
		_ = SetMapAsync();
	}

	async Task SetMapAsync()
	{
		MapPackage = await Package.Fetch( MapIdent, false );
		
		if ( MapPackage != null )
		{
			if ( MapPackage.Screenshots.Any() )
			{
				var screenshot = MapPackage.Screenshots.Last();
				
				BackgroundOverride.Style.BackgroundImage = Texture.Load( screenshot.Url );
				BackgroundMask.Style.MaskImage = Texture.Load( screenshot.Url );
			}
		}
	}
	
	void LeaveLobby( PanelEvent e )
	{
		Lobby.Leave();

		this.Navigate( "/" );
	}

	void StartMatch( PanelEvent e )
	{
		if ( Lobby.Owner.IsMe )
		{
			_ = Lobby.LaunchGameAsync();
		}
	}

	string ModeName
	{
		get
		{
			if ( !Lobby.IsValid() ) return null;
			
			if ( Lobby.Data.TryGetValue( "gunfight-gamemode", out var mode ) )
			{
				return mode;
			}

			return null;
		}
	}

	protected override int BuildHash()
	{
		if ( !Lobby.IsValid() ) return 0;

		return HashCode.Combine( ModeName, Lobby?.IsLocalPlayerReady, Lobby?.MemberCount, Lobby != null ? string.Join( ", ", Lobby.Data.Select( x => $"{x.Key}{x.Value}" ) ) : "0" );
	}
}
