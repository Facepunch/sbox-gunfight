@using Sandbox
@using Sandbox.UI

@implements INavigatorPage
@inherits Panel
@attribute [StyleSheet]
@namespace Facepunch.Gunfight.MainMenu

<root>
	<div class="main">
		<div class="left column grow">
			<div class="game-title">
				Gunfight
			</div>

			<div class="game-subtitle">
				Dying to get into the action?
			</div>

			<div style="flex-grow: 1;"/>

			<ExpandWidget>
				<Title>
					Modes
				</Title>
				<Body>
				<GamemodeList SelectedGamemode:bind=@SelectedMode />
				</Body>
			</ExpandWidget>

			<ActionButton onclick=@Return>
				<Title>
					Return
				</Title>
				<Extra>
					<Panel class="new"/>
				</Extra>
			</ActionButton>
		</div>

		<div style="flex-grow: 1;"/>

		<div class="right column grow">
			<div style="flex-grow: 1;"/>

			<ExpandWidget>
				<Title>
					<label>Maps - @SelectedMaps.Count selected</label>
				</Title>
				<Body>
				<PackageList OnUpdate=@OnMapSelectionChanged MaxSelection=@(0)>
					<WhenNothingFound>
						<label>No maps found...</label>
					</WhenNothingFound>
					<WhenSearching>
						<label>Searching for maps...</label>
					</WhenSearching>
				</PackageList>
				</Body>
			</ExpandWidget>

			<span style="gap: 16px;">
				<ActionButton onclick=@CreateLobby>
					<Title>
						Create Lobby
					</Title>
					<Extra>
						<i>wifi</i>
					</Extra>
				</ActionButton>
				<ActionButton onclick=@Search>
					<Title>
						Search
					</Title>
					<Extra>
						<i>search</i>
					</Extra>
				</ActionButton>
			</span>

		</div>
	</div>
</root>

@code
{
	List<Package> SelectedMaps { get; set; } = new();
	string SelectedMode { get; set; } = "KillConfirmedGamemode";
	
	void OnMapSelectionChanged( List<Package> packages )
	{
		SelectedMaps = packages;
	}
	
	void Search()
	{	
		// TODO - Return error if we can't search?
		_ = StartSearching();
		
		if ( MatchmakingSystem.CurrentState != MatchmakingSystem.State.Empty ) this.Navigate( "/" );
	}

	async Task StartSearching()
	{
		// Need to select a map.
		if ( SelectedMaps.Count < 1 ) return;

		var result = await MatchmakingSystem.Matchmake( SelectedMode,
			SelectedMaps.Select( x => x.FullIdent ).ToArray() );

		if ( result == "lobby" )
		{
			this.Navigate( "/lobby" );
		}
	}
	
	void Return()
	{
		this.Navigate( "/" );
	}

	async Task CreateLobby()
	{
		if ( SelectedMaps.Count < 1 )
		{
			// TODO - Error
			return;
		}
		
		await Game.Menu.CreateLobbyAsync( 16, "gunfight", true );

		var lobby = MainMenu.CurrentLobby;
		lobby.State = "lobby";
		lobby.Map = Game.Random.FromArray( SelectedMaps.Select( x => x.FullIdent ).ToArray() );
		lobby.SetData( "convar.gunfight_gamemode", SelectedMode );
		lobby.Title = $"{lobby.Owner.Name}'s game";
	}
}
