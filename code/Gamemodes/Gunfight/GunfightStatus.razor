@using Sandbox;
@using Sandbox.UI;

@namespace Facepunch.Gunfight.UI
@inherits Panel;

<style>
    GunfightStatus {
        position: absolute;
        left: 64px;
        top: 64px;
        width: 380px;
        flex-direction: column;

        > .info {
            margin-bottom: 4px;
            flex-direction: row;
            width: 100%;
            height: 30px;

            > .bar {
                flex-grow: 1;
                background-color: rgba(40, 38, 38, 0.5);
                border: 2px solid rgba(0, 0, 0, 0.2);

                > .bar-inner {
                    border: 2px solid rgba(0, 0, 0, 0.1);
                    box-shadow: 0px 1px 3px rgba(0, 0, 0, 0.25);

                    flex-direction: row-reverse;

                    &.friendly {
                        background-color: rgba( #1AE7F4, 0.8 );
                    }

                    &.enemy {
                        background-color: rgba( #F53F16, 0.8 );
                    }

                    > .score {
                        margin-right: 4px;
                        font-family: Oxanium;
                        font-weight: 600;
                        font-size: 18px;
                        text-shadow: 0px 1px 2px rgba(0, 0, 0, 0.55);
                        left: -6px;
                        color: rgba( white, 0.8 );
                    }
                }
            }

            > .members {
                flex-grow: 0;
                flex-shrink: 0;

                > .member {
                    height: 100%;
                    aspect-ratio: 1;
                    margin-left: 4px;

                    background-color: rgba(40, 38, 38, 0.5);
                    border: 2px solid rgba(0, 0, 0, 0.2);

                    > text {
                        font-family: Material Icons;
                        font-size: 24px;
                        left: -13px;
                        top: 1px;
                    }

                    &.dead {
                        background-color: rgba(95, 26, 26, 0.5);
                        border: 2px solid rgba(0, 0, 0, 0.2);

                        > text {
                            color: #A73F3F;
                        }
                    }

                    &.friendly {
                        > text {
                            color: #1AE7F4;
                        }
                    }

                    &.enemy {
                        > text {
                            color: #F53F16;
                        }
                    }
                }
            }
        }
    }
</style>

<root>
    <div class="info">
        <div class="bar">
            <div class="bar-inner friendly" style="width:@FriendlyPercent%">
                <text class="score friendly">@FriendlyHealth</text>
            </div>
        </div>
        <div class="members">
            @foreach( var member in FriendlyPlayers )
            {
                <div class="@GetClass( member ) friendly">
                    <text>@GetLabel( member )</text>
                </div>
            }
        </div>
    </div>

    <div class="info">
        <div class="bar">
            <div class="bar-inner enemy" style="width:@EnemyPercent%">
                <text class="score enemy">@EnemyHealth</text>
            </div>
        </div>
        <div class="members">
            @foreach( var member in EnemyPlayers )
            {
                <div class="@GetClass( member ) enemy">
                    <text>@GetLabel( member )</text>
                </div>
            }
        </div>
    </div>
</root>

@code
{
	public float FriendlyHealth => GetHealth( AliveFriendlyPlayers );
	public float MaxFriendlyHealth => GetMaxHealth( FriendlyPlayers );
    public float FriendlyPercent => ( FriendlyHealth / MaxFriendlyHealth ) * 100;
	public float EnemyHealth => GetHealth( AliveEnemyPlayers );
	public float MaxEnemyHealth => GetMaxHealth( EnemyPlayers );
    public float EnemyPercent => ( EnemyHealth / MaxEnemyHealth ) * 100;

	public float GetHealth( IEnumerable<GunfightPlayer> players )
	{
		var hp = 0f;
		players.ToList().ForEach( x => hp += x.Health );

		return hp;
	}

	public float GetMaxHealth( IEnumerable<GunfightPlayer> players )
	{
		var hp = 0f;
		players.ToList().ForEach( x => hp += x.MaxHealth );

		return hp;
	}

	public IEnumerable<GunfightPlayer> FriendlyPlayers => TeamSystem.MyTeam.AllPlayers();
	public IEnumerable<GunfightPlayer> AliveFriendlyPlayers => TeamSystem.MyTeam.AlivePlayers();
	public IEnumerable<GunfightPlayer> EnemyPlayers => TeamSystem.MyTeam.GetOpponent().AllPlayers();
	public IEnumerable<GunfightPlayer> AliveEnemyPlayers => TeamSystem.MyTeam.GetOpponent().AlivePlayers();

	string GetClass( GunfightPlayer player )
	{
		var @class = "member";
		if ( player.LifeState != LifeState.Alive ) @class += " dead";
		return @class;
	}

	string GetLabel( GunfightPlayer player )
	{
		var label = "person";
		if ( player.LifeState != LifeState.Alive ) label = "person_off";
		return label;
	}

    protected override int BuildHash()
    {
        return HashCode.Combine( FriendlyHealth, EnemyHealth );
    }
}
