@using Sandbox.UI;
@using Sandbox;
@using Facepunch.Gunfight;

@namespace Facepunch.Gunfight.UI
@inherits Panel

<style>
    Crosshair {
        position: absolute;
        left: 50%;
        top: 50%;
        transform: translateX(-50%) translateY(-50%);

        .element {
            transform: translateX(-50%) translateY(-50%);
            position: absolute;
            box-shadow: 1px 1px 1px rgba( black, 0.75 );
        }

        .dot {
            width: 3px;
            height: 3px;
        }

        .left, .right {
            width: 10px;
            height: 2px;
        }

        .top, .bottom {
            width: 2px;
            height: 10px;
        }

        .left {
            left: -@Distance;
        }

        .right {
            left: @Distance;
        }

        .top {
            top: -@Distance;
        }

        .bottom {
            top: @Distance;
        }

        transition: opacity 0.1s ease;
        opacity: 0;
        &.visible {
            opacity: 1;
        }
    }
</style>

<root>
    <div class="left element"></div>
    <div class="right element"></div>
    <div class="top element"></div>
    <div class="bottom element"></div>
    <div class="dot element"></div>
</root>

@code {
    public float PixelDistance { get; set; } = 20f;
    public string Distance => $"{PixelDistance}px";

    protected override void OnAfterTreeRender(bool firstTime)
    {
        base.OnAfterTreeRender( firstTime );
    }

    protected override int BuildHash()
    {
        return HashCode.Combine( Time.Now );
    }

    public override void Tick()
    {
        var player = Game.LocalPawn as GunfightPlayer;
        var weapon = player?.ActiveChild as GunfightWeapon;
        var isAiming = player?.IsAiming ?? false;

        if ( !player.IsValid() ) return;
        if ( !weapon.IsValid() ) return;
        if ( player.Controller == null ) return;

	    SetClass( "visible", !isAiming );
	    // SetClass( "visible", true );

        var speed = player?.Velocity.Length.LerpInverse( 0, 350, true ) ?? 0;
        if ( player?.Controller.Slide.IsActive ?? false ) speed = 0;

        // Sprinting cycle
        float cycle = Time.Now * 8f;
        var rotation = new Angles(
                MathF.Abs( MathF.Sin( cycle ) * 2.0f ),
                MathF.Cos( cycle ),
                0
            ) * speed * 5f;

        var tr = new PanelTransform();
        tr.AddTranslateX( rotation.yaw );
        tr.AddTranslateY( rotation.pitch );
        Style.Transform = tr;
    }
}
