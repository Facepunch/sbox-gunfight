@using Sandbox.UI;
@using Sandbox;
@using Facepunch.Gunfight;

@namespace Facepunch.Gunfight.UI
@inherits Panel

<root>
    <div @ref="Left" class="left element"></div>
    <div @ref="Right" class="right element"></div>
    <div @ref="Top" class="top element"></div>
    <div @ref="Bottom" class="bottom element"></div>

    @if ( UseDot )
    {
        <div @ref="Dot" class="dot element"></div>
    }
</root>

@code
{
    Panel Left;
    Panel Right;
    Panel Top;
    Panel Bottom;
    Panel Dot;

    GunfightPlayer Player => GunfightCamera.Target as GunfightPlayer;
    GunfightWeapon Weapon => Player?.ActiveChild as GunfightWeapon;

    float BaseDistance => 10 + ( Weapon.BulletSpread * 250f );
    // 10px base size
    float BaseElementSize => 10;

    float VelocityScale => MathF.Abs( Player.Velocity.Length ).LerpInverse( 0, 700f, true );
    float VelocityScaleFactor => 50;
    float RecoilScaleFactor => 5;

    public float Distance => GetDistance();

    private float LerpedDistance = 15;

    protected override int BuildHash()
    {
        var isAiming = Player?.IsAiming ?? false;

        return HashCode.Combine( Player, Weapon, isAiming, Dot );
    }

    float GetDistance()
    {
        var dist = BaseDistance;

        // velocity
        dist += VelocityScale * VelocityScaleFactor;

        // recoil
        dist += MathF.Max( Weapon.CameraRecoil.x, Weapon.CameraRecoil.y ) * RecoilScaleFactor;

        return dist.Clamp( 0, 70 );
    }

    Length? GetLength()
    {
        var size = BaseElementSize;

        var dist = GetDistance() - BaseDistance;

        size += dist * 0.2f;

        return Length.Pixels( size );
    }

    void UpdateDistance()
    {
        LerpedDistance = LerpedDistance.LerpTo( Distance, Time.Delta * 7.5f );

        var length = GetLength();
        var distance = LerpedDistance;

        Left.Style.Left = -distance;
        Left.Style.Width = length;

        Right.Style.Left = distance;
        Right.Style.Width = length;

        Top.Style.Top = -distance;
        Top.Style.Height = length;

        Bottom.Style.Top = distance;
        Bottom.Style.Height = length;

        if ( Dot != null )
        {
            Dot.Style.Opacity = 1f - LerpedDistance.LerpInverse( 30, 50, true );
        }
    }

    public override void Tick()
    {
        var player = GunfightCamera.Target as GunfightPlayer;
        var weapon = player?.ActiveChild as GunfightWeapon;
        var isAiming = player?.IsAiming ?? false;

        if ( !GunfightCamera.IsThirdPerson )
        {
            SetClass( "visible", ( !isAiming || PlayerController.UseAimDebug ) && player?.LifeState == LifeState.Alive && !(weapon?.IsReloading ?? false) );
        }
        else
        {
            SetClass("visible", true);
        }

	    if ( !player.IsValid() ) return;
	    if ( !weapon.IsValid() ) return;
	    if ( player.Controller == null ) return;
	    
        var speed = player?.Velocity.Length.LerpInverse( 0, 350, true ) ?? 0;
        if ( player?.Controller.Slide.IsActive ?? false ) speed = 0;

        // Sprinting cycle
        float cycle = Time.Now * 8f;
        var rotation = new Angles(
                MathF.Abs( MathF.Sin( cycle ) * 2.0f ),
                MathF.Cos( cycle ),
                0
            ) * speed * 5f;

        UpdateDistance();

        var tr = new PanelTransform();
        tr.AddTranslateX( rotation.yaw );
        tr.AddTranslateY( rotation.pitch );
        Style.Transform = tr;
    }
}
