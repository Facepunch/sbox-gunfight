@using Sandbox;
@using Sandbox.UI;

@namespace Facepunch.Gunfight.MainMenu
@attribute [StyleSheet]

<root class="card card-vertical card-package @FavouriteClass @RatingClass">

    <div class="card-image" onclick=@OnCardClicked style="background-image: url( @Package.Thumb )">

        @if (Decorated)
        {
            if (Package.Public == false)
            {
                <div class="card-decorator-hidden" tooltip="This is hidden from the public">Hidden</div>
            }
            if (Package.Interaction.FirstUsed == null)
            {
                <div class="card-decorator-unplayed" tooltip="You have never played this">Unplayed</div>
            }
            else if (Package.Updated > Package.Interaction.LastUsed)
            {
                <div class="card-decorator-updated" tooltip="This has been updated since you played it">Updated</div>
            }

            if (Package.Usage.UsersNow > 0)
            {
                <div class="card-decorator-users" tooltip="This many users are playing now">
                    <i>sports_esports</i>
                    <span> @Package.Usage.UsersNow.KiloFormat() </span>
                </div>
            }
        }
    </div>
    <div class="package-card-body">
        <div class="body-content">
            <div class="nowrap title" @onclick=@( () => Game.Overlay.ShowPackageModal( Package.FullIdent ) )>@Package.Title</div>
            <div class="body-meta">
                @if (Package.Interaction.Used)
                {
                    <div tooltip="Amount of hours you've played"><i>alarm</i> @FormatHoursPlayed()</div>
                }
            </div>
        </div>
    </div>
</root>

@code
{
    public Package Package { get; set; }

    /// <summary>
    /// Called when the icon part of the card is pressed
    /// </summary>
    public System.Action OnLaunch { get; set; }


    public string HoverIcon { get; set; } = "play_arrow";

    public bool Decorated { get; set; } = true;

    string FavouriteClass => Package.Interaction.Favourite ? "is-favourite" : "";
    string RatingClass
    {
        get
        {
            if (Package.Interaction.Rating == null) return "";
            if (Package.Interaction.Rating == 0) return "is-rated-up";
            if (Package.Interaction.Rating == 1) return "is-rated-down";

            return "";
        }
    }

    public string FormatHoursPlayed()
    {
        double minutes = Package.Interaction.Seconds / 60.0;

        if (minutes < 60)
            return minutes.ToString("0m");

        double hours = Package.Interaction.Seconds / 60.0 / 60.0;

        if (hours > 10)
            return hours.ToString("0h");

        return hours.ToString("0.#h");
    }

    public string UpdatedString()
    {
        System.TimeSpan span = System.DateTimeOffset.UtcNow - Package.Updated.LocalDateTime;

        if (span.TotalHours < 6) return "just now";
        if (span.TotalHours < 24) return "today";
        if (span.TotalHours < 48) return "yesterday";
        if (span.TotalDays < 8) return "this week";
        if (span.TotalDays < 15) return "last week";
        if (span.TotalDays < 30) return "this month";
        if (span.TotalDays < 60) return "last month";
        if (span.TotalDays < 365) return "this year";
        if (span.TotalDays < 365 * 2) return "last year";

        return "ages ago";
    }

    void OnCardClicked()
    {
        OnLaunch?.Invoke();
    }
}
