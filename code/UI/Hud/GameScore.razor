@using Sandbox;
@using Sandbox.UI;

@namespace Facepunch.Gunfight.UI
@inherits Panel;

<root>
    <div class="info">
        <div class="bar">
                <div class="bar-inner friendly" style="width:@MyScorePercent%">
                    <text class="score friendly">@MyScore</text>
                </div>
        </div>
    </div>

    <div class="info">
        <div class="bar">
            <div class="bar-inner enemy" style="width:@EnemyScorePercent%">
                <text class="score enemy">@EnemyScore</text>
            </div>
        </div>
    </div>

    <div class="state">
        <label>@GameState</label>
    </div>
</root>

@code
{
	public int MyScore => GunfightGame.Current.Scores.GetScore( TeamSystem.MyTeam );
	public int EnemyScore => GunfightGame.Current.Scores.GetScore( TeamSystem.GetEnemyTeam( TeamSystem.MyTeam ) );
    public int MaxScore => GunfightGame.Current.Scores.MaximumScore;

    public int MyScorePercent => ( ( (float)MyScore / (float)MaxScore ) * 100 ).CeilToInt();
    public int EnemyScorePercent => ( ( (float)EnemyScore / (float)MaxScore ) * 100 ).CeilToInt();

    public string GameState {
        get {
            if ( GamemodeSystem.Current.GetGameStateLabel() != "N/A" )
            {
                return GamemodeSystem.Current.GetGameStateLabel();
            }
            
            if ( MyScore > EnemyScore )
                return "WINNING";
            else if ( EnemyScore > MyScore )
                return "LOSING";
            return "DRAW";
        }
    }

	string GetClass( GunfightPlayer player )
	{
		var @class = "member";
		if ( player.LifeState != LifeState.Alive ) @class += " dead";
		return @class;
	}

	string GetLabel( GunfightPlayer player )
	{
		var label = "person";
		if ( player.LifeState != LifeState.Alive ) label = "person_off";
		return label;
	}

    protected override int BuildHash()
    {
        return HashCode.Combine( MyScore, EnemyScore, GameState );
    }
}
