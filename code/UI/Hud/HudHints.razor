@using Sandbox.Component;
@using Sandbox.UI;

@namespace Facepunch.Gunfight.UI
@inherits Panel
@attribute [StyleSheet( "/UI/Hud/HudHints.scss" )]

<root>
    <div class="reload" @ref=ReloadHint>
        <InputHint Button="Reload" />
        <label>RELOAD</label>
    </div>

    <div class="spectator" @ref=SpectatorHint>
        <div class="entry identity">
            <label>Spectating</label>
            <label class="name">@SpectatorTarget</label>
        </div>
        
        <div class="binds">
            <div class="entry">
                <InputHint Button="SpectatorPrev" />
                <label>Previous</label>
            </div>

            <div class="entry">
                <InputHint Button="SpectatorNext" />
                <label>Next</label>
            </div>
        </div>
    </div>

    <div class="vault" @ref=VaultHint>
        <InputHint Button="Jump" />
        <label>to</label>
        <img class="icon" src="ui/hints/climb_arrow.png" />
    </div>

    <div class="coveraim" @ref=CoverAimHint>
        <InputHint Button="Mount" />
    </div>

    <div class="pickup" @ref=PickupHint>
        <InputHint Button="Interact" />
        <label class="name" @ref=PickupLabel />
    </div>
</root>

@code
{
    // @ref
    public Panel ReloadHint { get; set; }
    // @ref
    public Panel VaultHint { get; set; }
    // @ref
    public Panel CoverAimHint { get; set; }
    // @ref
    public Panel PickupHint { get; set; }
    // @ref
    public Label PickupLabel { get; set; }
    // @ref
    public Panel SpectatorHint { get; set; }
    // @text
    public string SpectatorTarget => GunfightCamera.Target?.Client?.Name ?? "nobody";

    Entity lastObserved;
    protected Entity LastObserved
    {
        get => lastObserved;
        set
        {
            if ( lastObserved != value && lastObserved.IsValid() )
            {
                var glow = lastObserved.Components.Get<Glow>();
                if ( glow != null )
                    glow.Enabled = false;
            }

            lastObserved = value;

            if ( lastObserved.IsValid() )
            {
                var glow = lastObserved.Components.GetOrCreate<Glow>();
                glow.Enabled = true;
                glow.Width = 0.25f;
                glow.Color = Color.FromBytes( 255, 207, 38, 125 );
                glow.ObscuredColor = Color.FromBytes( 255, 207, 38, 5 );
                glow.InsideObscuredColor = Color.FromBytes( 255, 207, 38, 2 );
            }
        }
    }

    protected override int BuildHash()
    {
        return HashCode.Combine( Time.Now );
    }

    public override void Tick()
    {
        var player = Game.LocalPawn as GunfightPlayer;

        SpectatorHint.SetClass( "active", GunfightCamera.Target != Game.LocalPawn );

		if ( !player.IsValid() ) 
			return;

		var controller = player.Controller as PlayerController;
		if ( controller == null ) return;

		VaultHint.SetClass( "show", controller.Climb.CanActivate( false ) && !controller.Climb.IsActive );

		var weapon = player.ActiveChild as GunfightWeapon;
		if ( !weapon.IsValid() ) return;

		ReloadHint.SetClass( "show", weapon.IsLowAmmo() && !weapon.IsReloading );

		CoverAimHint.SetClass( "show", controller.CoverAim.CanMountWall() && !controller.CoverAim.IsActive );

		var cover = CoverAimHint;
		var screenPos = controller.CoverAim.MountWorldPosition.ToScreen();
		cover.Style.Left = Length.Fraction( screenPos.x );
		cover.Style.Top = Length.Fraction( screenPos.y );

		var tr = Trace.Ray( Camera.Position, Camera.Position + Camera.Rotation.Forward * 100000f )
			.WithAnyTags( "solid", "weapon" )
			.Run();


		var isUsable = tr.Hit && tr.Entity is IUse use && use.IsUsable( player ) && tr.Distance < 128f;

		LastObserved = isUsable ? tr.Entity : null;
		PickupHint.SetClass( "show", isUsable );

		if ( isUsable )
		{
			if ( tr.Entity.IsValid() && tr.Entity is GunfightWeapon wpn )
				PickupLabel.Text = wpn.Name;
			else
				PickupLabel.Text = "Use";
		}
	}
}
