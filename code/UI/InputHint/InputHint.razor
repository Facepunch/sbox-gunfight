@using Sandbox;
@using Sandbox.UI;

@namespace Facepunch.Gunfight.UI

<style>
    inputhint {
        align-items: center;
        height: 32px;

        .glyph {
            background-size: contain;
            background-repeat: no-repeat;
        }

        .action {
            margin-left: 8px;
            margin-bottom: 2px;
            font-size: 16px;
            font-family: Quantico-Regular;
            color: white;
            font-weight: bold;
            text-shadow: 0px 0px 2px black;
        }

        flex-direction: row;

        &.invert {
            .action {
                margin-right: 8px;
            }

            flex-direction: row-reverse;
        }
    }
</style>

<root>
    <img class="glyph" @ref=Glyph />

    @if ( !string.IsNullOrEmpty( Text ) )
    {
        <label class="action">@Text</label>
    }
</root>

@code
{
    public string Text { get; set; }
    public Image Glyph { get; set; }
    public string Button { get; set; }

    void Resize( Texture texture )
    {
        // This is shit

        if ( texture.Width != texture.Height )
        {
            Glyph.Style.Width = Length.Pixels( 64f );
            Glyph.Style.Height = Length.Pixels( 32f );
        }
        else
        {
            Glyph.Style.Width = Length.Pixels( 32f );
            Glyph.Style.Height = Length.Pixels( 32f );
        }
    }

    public void SetButton( string value )
    {
        var texture = Input.GetGlyph( value, InputGlyphSize.Medium, GlyphStyle.Dark.WithSolidABXY().WithNeutralColorABXY() );
        if ( texture is null ) return;

        Glyph.Texture = texture;

        Resize( texture );
        StateHasChanged();
    }

    int hash;
    public override void Tick()
    {
        if ( string.IsNullOrWhiteSpace( Button ) ) return;

        if ( Button.GetHashCode() != hash )
        {
            hash = Button.GetHashCode();
            SetButton( Button );
        }
    }
}
