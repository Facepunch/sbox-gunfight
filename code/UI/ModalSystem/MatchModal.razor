@using Sandbox.UI
@using System.Text.Json
@using Facepunch.Gunfight.UI

@namespace Facepunch.Gunfight.MainMenu
@inherits BaseModal
@attribute [StyleSheet]

<root>
    <div class="main">
        <div class="left">
            <div class="row">
                <div class="column">
                    @if ( MapPackage != null )
                    {
                        <PackageCard Fill=@false Package=@MapPackage />
                    }
                </div>

                <div class="column grow center">
                    <div class="column grow">
                        <div class="span">
                            <i>calendar-xmark</i>
                            <label class="subtitle bold">@Match.StartTime.ToString( "D" )</label>
                        </div>

                        <div class="span">
                            <i>stopwatch</i>
                            <label class="subtitle bold">@GetMatchDuration( Match.Duration )</label>
                        </div>

                        <div class="span">
                            <i>people-group</i>
                            <label class="subtitle bold">@Match.Players.Count</label>
                        </div>

                        <div class="span">
                            <i>server</i>
                            <label class="subtitle bold">@Match.ServerName</label>
                        </div>
                    </div>
                    <div class="column">
                        <GamemodeCard GamemodeName=@Match.Gamemode />
                    </div>
                </div>
            </div>

            <div style="height: 24px;"/>

            <label class="subtitle">TEAMS</label>

            <div class="players">
                @foreach ( var group in Match.Players.GroupBy( x => x.Team ) )
                {
                    <div class="group @GetGroupClass( group.Key )">
                        @if ( MatchScores != null )
                        {
                            @if ( MatchScores.ContainsKey( $"{group.Key}" ) )
                            {
                                <div class="row header">
                                    <label>@group.Key</label>
                                    <div class="grow" />
                                    <label class="score">@MatchScores[$"{group.Key}"]</label>
                                </div>
                            }
                        }

                        @foreach ( var player in group.OrderByDescending( x => GetData( x, "score", 0 ) ) )
                        {
                            <div class="row">
                                <img class="avatar" src="avatar:@player.SteamId" />

                                <div class="span">
                                    <i class="level">chess-rook</i>
                                    <label>@GetData( player, "level", 0 )</label>
                                    <label>@GetPlayerName( player.SteamId )</label>
                                </div>

                                <div class="grow" />

                                <div class="span bold">
                                    <i>chart-simple</i>
                                    <label>@GetData( player, "score", 0 )</label>
                                </div>

                                <div class="span bold">
                                    <i>person-rifle</i>
                                    <label>@GetData( player, "kills", 0 )</label>
                                </div>

                                <div class="span bold">
                                    <i>handshake-angle</i>
                                    <label>@GetData( player, "assists", 0 )</label>
                                </div>

                                <div class="span bold">
                                    <i>skull-crossbones</i>
                                    <label>@GetData( player, "deaths", 0 )</label>
                                </div>
                            </div>
                        }
                    </div>    
                }
            </div>
        </div>
    </div>
</root>


@code
{
    public Progression.MatchHistory.Match Match { get; set; }

    Package MapPackage { get; set; }

    Dictionary<string, int> MatchScores => GetData( "scores", new Dictionary<string, int>() );

    public T GetData<T>( Progression.MatchHistory.MatchPlayer player, string key, T defaultValue )
    {
        if ( player.Data.TryGetValue( key, out var value ) )
        {
            if ( value is JsonElement element )
            {
                return (T)element.Deserialize(typeof(T));
            }

            return (T)value;
        }

        return defaultValue;
    }

    public T GetData<T>( string key, T defaultValue )
    {
        if ( Match.Data.TryGetValue( key, out var value ) )
        {
            if ( value is JsonElement element )
            {
                return (T)element.Deserialize(typeof(T));
            }

            return (T)value;
        }

        return defaultValue;
    }

    public MatchModal( Progression.MatchHistory.Match match )
    {
        Match = match;
        FetchPackage();
    }

    async void FetchPackage()
    {
        MapPackage = await Package.FetchAsync( Match.MapIdent, false );
        StateHasChanged();
    }

    string GetPlayerName( long steamId )
    {
        var name = new Friend( steamId ).Name;
        if ( string.IsNullOrEmpty( name ) )
            name = $"BOT";

        return name;
    }

    string GetGroupClass( Team team )
    {
        var myPlayer = Match.Players.FirstOrDefault( x => x.SteamId == Game.SteamId );
        var state = TeamSystem.GetFriendState( myPlayer.Team, team );

        if ( state == TeamSystem.FriendlyStatus.Friendly ) return "friend";
        if ( state == TeamSystem.FriendlyStatus.Hostile ) return "enemy";

        return "";
    }

    string GetMatchDuration( TimeSpan span )
    {
        return $"{span.TotalMinutes:n0} minutes, {span.Seconds:n0} seconds";
    }
}
