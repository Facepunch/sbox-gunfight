@using Sandbox.UI;
@inherits Panel;

@namespace Facepunch.Gunfight.UI

<root>
    <label class="level">@Progression.Levelling.CurrentLevel</label>
    <div class="segments">
        @for (int i = 0; i < Segments; i++)
        {
            <div class="segment">
                <div class="inner-bar" style="width:@(GetSegmentPercent(i))%" />
            </div>
        }
    </div>
    <label class="level">@(Progression.Levelling.CurrentLevel + 1)</label>
</root>

@code
{
    public int Segments { get; set; } = 10;

    public int GetSegmentPercent( int i )
    {
        var xp = Progression.Levelling.TotalExperience;
        var startXp = Progression.Levelling.GetRequiredExperienceForLevel( Progression.Levelling.CurrentLevel );
        var nextXp = Progression.Levelling.GetRequiredExperienceForLevel( Progression.Levelling.CurrentLevel + 1 );

        // Log.Info($"{Progression.Levelling.CurrentLevel}: {startXp}, {Progression.Levelling.CurrentLevel+1}: {nextXp}");

        float xpNormal = xp - startXp;
        float xpGoal = nextXp - startXp;

        var activeSegments = (int)MathF.Round((xpNormal / xpGoal) * Segments);
        if ( i < activeSegments ) return 100;

        var percent = MathX.CeilToInt( ( xpNormal / xpGoal ) * 100f );
        var segmentPercent = ( (float)i * 100f ) / (float)Segments;
        var progressThroughSegment = ( percent - segmentPercent ) * Segments;
        if ( progressThroughSegment >= 0 ) return progressThroughSegment.CeilToInt();

        return 0;
    }

    protected override int BuildHash()
    {
        return HashCode.Combine( Progression.Levelling.TotalExperience );
    }
}
