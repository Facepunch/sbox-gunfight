@using Sandbox;
@using Sandbox.UI;

@namespace Facepunch.Gunfight.UI

<root class="@Classes()">
    @if ( Team != Team.Unassigned )
    {
        <div class="header">
            <label class="team-name">@TeamName</label>
            <div class="grow" />
            <div class="score">
                <label class="team-score">@TeamScore</label>
                <div class="bar">
                    <div class="bar-inner" style="width: @ScorePercent%"/>
                </div>
            </div>
        </div>
    }

    <div class="names">
        <label class="name">Name</label>
        <label class="kills">Kills</label>
        <label class="deaths">Deaths</label>
        <label class="score">Score</label>
        <label class="ping">Ping</label>
    </div>

    <div class="canvas" @ref=Canvas>
        @if ( Rows.Count < 1 )
        {
            <label class="placeholder">Waiting for players</label>
        }
    </div>
</root>

@code
{
    // Panel that all Rows will be placed in
    public Panel Canvas;
    public Team Team = Team.Unassigned;

    public string TeamName => Team.GetName();
    public int TeamScore => GunfightGame.Current.Scores.GetScore( Team );
    public float ScorePercent => ( (float)TeamScore / (float)GunfightGame.Current.Scores.MaximumScore ) * 100f;

    public Dictionary<Client, ScoreboardRow> Rows = new();

    public void Update()
    {
        if ( Canvas == null ) return;

        foreach ( var client in Client.All.Except( Rows.Keys ).Where( x => x.GetTeam() == Team ) )
        {
            var entry = AddClient( client );
            if ( entry == null ) continue;

            Rows[client] = entry;
        }

        foreach ( var client in Rows.Keys.Except( Client.All ) )
        {
            if ( Rows.TryGetValue( client, out var row ) )
            {
                row?.Delete();
                Rows.Remove( client );
            }
        }
    }

    ScoreboardRow AddClient( Client cl )
    {
        var teamIndex = cl.Components.Get<TeamComponent>()?.Team ?? Team.Unassigned;

		var p = Canvas.AddChild<ScoreboardRow>();
		p.SetClient( cl );

		return p;
	}

    protected string Classes()
    {
        var friendState = TeamSystem.GetFriendState( Team, TeamSystem.MyTeam );

		if ( friendState == TeamSystem.FriendlyStatus.Friendly ) return "friend";
		if ( friendState == TeamSystem.FriendlyStatus.Hostile ) return "enemy";
		if ( friendState == TeamSystem.FriendlyStatus.Neutral ) return "neutral";

        return "";
    }

    protected override int BuildHash()
    {
        return HashCode.Combine( Rows.Count, TeamScore );
    }
}
